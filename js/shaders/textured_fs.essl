Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es
	precision highp float;

	out vec4 fragmentColor;

	in vec2 texCoord; 
	in vec3 worldPos;
	in vec3 worldNormal;
	// pass this on from vertex shader
	// we need to bind texture to this
	uniform vec3 shadowColor;
	uniform vec3 cameraPos;
	uniform sampler2D colorTexture;
	uniform vec4 lightPos[1]; //xyz is the direction, w is 0 [1] is the size
	uniform vec4 lightPowerDensity[1]; // w ignored

void main(void) {

	// M at unit = lightPowerDensity[0].rgb
	// y = lightPos[0].xyz
	// yw = lightPos[0].w
	// x = worldPos
	// l - vec3 lightPiz
	// M - vec3 pdl
	vec3 normal = normalize(worldNormal);


	for (int i = 0; i < 1; i++) {
		vec4 M = lightPowerDensity[i];

		vec3 lightDirection = lightPos[i].xyz - (worldPos.xyz * lightPos[i].w);
		M.rgb = M.rgb / (length(lightDirection) * length(lightDirection));

		lightDirection = normalize(lightDirection);

		vec4 diffuseColor = texture(colorTexture, texCoord);

		float cosineAngle = dot(normal, lightDirection);

		diffuseColor.rgb *= cosineAngle;
		diffuseColor.rgb *= M.rgb;


		


		// phong blin


		vec3 vVector = normalize(cameraPos - worldPos.xyz);

		vec3 hVector = normalize(lightDirection + vVector);

		float ndoth = dot(normalize(normal), hVector);

		float pow = pow(ndoth, 100.0);

		vec3 phonnBling = pow * M.rgb;

		if (ndoth < 0.00) {
			fragmentColor += diffuseColor;
		} else {
			diffuseColor.rgb += phonnBling;
			fragmentColor += diffuseColor;
		}

	}

	fragmentColor.rgb *= shadowColor;

}
`;